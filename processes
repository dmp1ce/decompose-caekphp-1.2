DECOMPOSE_PROCESSES=( 'env' 'explore' 'dc' 'build' 'up' 'start_nginx_proxy'
  'generate_self_signed_certs' 'import_db' 'explore_db' 'import_uploads'
  'import_cache' 'project-root' )

_decompose-process-env() {
  echo "$PROJECT_ENVIRONMENT"
  echo "PRODUCTION: $PRODUCTION"
  echo "DEVELOPMENT: $DEVELOPMENT"
}
_decompose-process-env_help() {
  echo "  Show environment setting"
}

_decompose-process-explore() {
  echo "Entering PHP container clone..."
  echo "docker-compose -f $dc_config_file run --rm php /bin/bash"
}
_decompose-process-explore_help() {
  echo "  Explore!"
}

_decompose-process-explore_db() {
  # Get the name of the database container
  db_container_name=$(docker-compose ps | grep _db_ | cut -d' ' -f1)

  # Enter mysql
  docker exec -it $db_container_name bash -c "export TERM=dumb; mysql -u app_user -ppassword -D app"
}
_decompose-process-explore_db_help() {
  echo "  Explore database"
}

_decompose-process-dc() {
  echo 'docker-compose -f $dc_config_file "$@"'
}
_decompose-process-dc_help() {
  echo "  Run docker compose in the current environment ($PROJECT_ENVIRONMENT)"
}

_decompose-process-build() {
  # TODO: Generate SSL certificates if they don't already exist.
  #echo 'TODO: Generate SSL certs for testing'
  # TODO: Rebuild source for production
  # TODO: Build remaining docker-compose containers

  decompose-process-templates 
  docker-compose build
}
_decompose-process-build_help() {
  echo "  Build the project"
}

_decompose-process-up() {
  docker-compose up -d
}
_decompose-process-up_help() {
  echo "  Start project locally"
}

_decompose-process-start_nginx_proxy() {
  local nginx_proxy_id=$(docker ps --format "{{.ID}} {{.Image}}" | grep "jwilder/nginx-proxy" | cut -d " " -f1)
  if [ -n "$nginx_proxy_id" ]; then
    echo "Closing currently running proxy: $nginx_proxy_id"
    docker stop "$nginx_proxy_id"
  fi
  # TODO: Also search for 'nginx-proxy' label
  docker run --label "nginx_proxy" -d -p 80:80 -p 443:443 -e DEFAULT_HOST="$PROJECT_NGINX_DEFAULT_HOST"  -v /var/run/docker.sock:/tmp/docker.sock:ro jwilder/nginx-proxy
}
_decompose-process-start_nginx_proxy_help() {
  echo "  Start nginx-proxy which can host multiple sites"
}

_decompose-process-generate_self_signed_certs() {
  local project_root; _decompose-project-root project_root
  mkdir $project_root/certs
  openssl req -nodes -x509 -newkey rsa:4096 -keyout $project_root/certs/server.key -out $project_root/certs/server.crt -days 356
}
_decompose-process-generate_self_signed_certs_help() {
  echo "  Generate self signed tls certifications"
}

_decompose-process-import_db() {
  # Verify the the first parameter is a file
  local sql_file=$1
  if [ ! -e "$sql_file" ]; then
    echo "File '$sql_file' does not exist"
    exit 1
  fi

  # Get the name of the database container
  db_container_name=$(docker-compose ps | grep _db_ | cut -d' ' -f1)

  # Copy file to container /tmp
  docker cp $sql_file $db_container_name:/tmp

  # Import file
  docker exec $db_container_name bash -c "export TERM=dumb; mysql -u app_user -ppassword -D app < /tmp/$sql_file"

  # Delete /tmp file
  docker exec $db_container_name rm /tmp/$sql_file
}
_decompose-process-import_db_help() {
  echo "  Import DB passed in as a parameter 1"
}

_decompose-process-import_uploads() {
  # Verify the the first parameter is a file
  local directory=$1
  if [ ! -d "$directory" ]; then
    echo "Directory '$directory' does not exist"
    exit 1
  fi

  # Get the name of the database container
  php_container_name=$(docker-compose ps | grep _php_ | cut -d' ' -f1)

  # Copy directory to container
  docker cp $directory/. $php_container_name:/srv/http/source/app/webroot/img/uploads
}
_decompose-process-import_uploads_help() {
  echo "  Copies 'uploads' directory to the php container"
}

_decompose-process-import_cache() {
  # Verify the the first parameter is a file
  local directory=$1
  if [ ! -d "$directory" ]; then
    echo "Directory '$directory' does not exist"
    exit 1
  fi

  # Get the name of the database container
  php_container_name=$(docker-compose ps | grep _php_ | cut -d' ' -f1)

  # Copy directory to container /tmp
  docker cp $directory/. $php_container_name:/srv/http/source/app/webroot/img/cache
}
_decompose-process-import_cache_help() {
  echo "  Copies 'cache' directory to the php container"
}

_decompose-process-project-root() {
  local project_root; _decompose-project-root project_root; echo $project_root
}
_decompose-process-project-root_help() {
  echo "  Print project root directory"
}

# vim:syntax=sh
